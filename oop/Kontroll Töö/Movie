"""Movie."""


class Movie:
    """Movie object, do not change."""

    def __init__(self, name: str, year: int, genres: list):
        """Movie constructor."""
        self.name = name
        self.year = year
        self.genres = genres


def create_movie(name_with_year: str, genre1: str, genre2: str) -> Movie | None:
    """
    Create a new movie from name and 2 genres.

    Name is in format "name some thing (2019)".
    Year is inside parenthesis and always 4 digits.
    Everything before parenthesis is a name.
    Return None, if:
    - year is below 1900 and above 2020 ("blah (1200)", "blah (3000)")
    - name is empty ("(1933)")
    Otherwise create a new movie and return it.

    Year has to be int.
    Remove trailing space from name.
    "film (1999)" => should give "film" 1999
    """
    # Extract movie name and year
    try:
        name, year_str = name_with_year.rsplit(" ", 1)
        year = int(year_str[1:-1])
    except (ValueError, IndexError):
        return None

    # Check if year is valid
    if year < 1900 or year > 2020:
        return None

    # Check if name is empty
    if not name:
        return None

    # Remove trailing space from name
    name = name.rstrip()

    return Movie(name, year, [genre1, genre2])


def get_ordered_movies(movies: list[Movie]) -> list[Movie]:
    """
    Return sorted movies by year (desc, newer first) and count of genres (asc).

    If both year and count of genres are the same, keep the original order.
    """
    def sort_key(movie: Movie) -> tuple[int, int]:
        return -movie.year, len(movie.genres)

    return sorted(movies, key=sort_key)


def add_genres(movies: list[Movie], genres: list[str]) -> None:
    """
    Modify the movies in the list by adding genres.

    A genre is added if it does not already exist in the movie's genres list.
    """
    for movie in movies:
        for genre in genres:
            if genre not in movie.genres:
                movie.genres.append(genre)


def remove_movies_by_genre(movies: list[Movie], genre: str) -> list[Movie]:
    """
    Return a new list where all the movies with the given genre are removed.

    The order of movies should remain the same.
    The original movies list should remain unchanged.
    """
    return [movie for movie in movies if genre not in movie.genres]